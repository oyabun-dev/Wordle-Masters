const rows = document.querySelectorAll('.rows'); // Nodelist qui reprÃ©sente les lignes ou niveaux
const rowsArray = Array.from(rows); //  on crÃ©e un tableau Ã  partir de rows, ils sont 6 et sont indexÃ©s de 0 Ã  5
var wordBuffer; var isInputValidated; var isValidated; var currentRowIndex;

init();

document.addEventListener('keyup', fillRow);

async function fillRow(e){ // Ã  chaque fois qu'une touche est tapÃ©e

    letterBuffer = e.key; //cette touche est gardÃ©e dans letterBuffer
    if(isLetter(letterBuffer) && wordBuffer.length < 5) { // on vÃ©rifie si cette touche est une lettre et que la longueur du mot ne dÃ©passe pas 5 lettres
        wordBuffer += letterBuffer.toLowerCase() // si oui on le concatÃ©ne Ã  l'ancienne valeur de word buffer
        rowsArray[currentRowIndex].children[wordBuffer.length - 1].textContent = letterBuffer.toUpperCase(); // on remplit en mÃªme temps la colonne correspondante
    }
    if (letterBuffer === 'Backspace') { // on vÃ©rifie si la touche tapÃ©e est 'Backspace'
        console.log('there');
        wordBuffer = clearLast(wordBuffer); // alors on efface la derniÃ¨re lettre saise
    }
    if (letterBuffer === 'Enter') { // si la touche saisie est 'Enter' alors on vÃ©rifie la rÃ©ponse donnÃ©e
        isInputValidated = checkRow(wordBuffer, isInputValidated); // on donne la valeur de retour qui est un boolÃ©en a isInputValidated
        if (isInputValidated) { // si le input est validÃ© alors
            const promise = await fetch('https://words.dev-apis.com/word-of-the-day');
            const wordObject = await promise.json();
            const word = wordObject.word;
            let wordMatch = checkWord(wordBuffer, word); // on passe a 'wordMatch' le boolÃ©en de retour de checkWord() qui vÃ©rifie si c'est le bon mot
            let columns = Array.from(rowsArray[currentRowIndex].children) // CrÃ©e un tableau Ã  partir des colonnes de chaque ligne pour changer la couleur selon la validitÃ© de la rÃ©ponse
            if (wordMatch){ // si c'est le bon mot alors
                document.removeEventListener('keyup', fillRow); // on supprime le listener
                columns.forEach(column => { // on update le background en vert si on trouve
                    column.style.backgroundColor = "limegreen";
                    column.style.color = "white";
                    column.style.borderColor = "green";
                }); 
                alert("Good job, you win! ðŸŽ‰ðŸŽ‰ðŸŽ‰");
            } else { // si ce n'est pas le bon mot alors
                for (let i = 0; i < wordBuffer.length; i++) { // on parcours le mot saisi
                    for (let j = 0; j < word.length; j++) { // on parcours en mÃªme temps le mot du jour
                        if (wordBuffer[i] == word[j]) { // si on trouve des caractÃ¨res se ressemblant alors, on update le background en orange
                            columns[i].style.backgroundColor = "orange";
                            columns[i].style.color = "white";
                            columns[i].style.borderColor = "#f5f5f5";
                            if (i == j) { // si en plus de se ressembler ils sont Ã  la mÃªme position, on update le background en vert
                                columns[i].style.backgroundColor = "limegreen";
                                columns[i].style.color = "white";
                                columns[i].style.borderColor = "#f5f5f5";
                            }
                            break; // sans le break, toutes les rÃ©ponse seront coloriÃ©s en rouge il attend que j se termine pour changer le background alors que nous on veut un update Ã  chaque itÃ©ration
                        } else { // sinon, on update le background en rouge pour les mauvaise rÃ©ponses
                            columns[i].style.backgroundColor = "red";
                            columns[i].style.color = "white";
                            columns[i].style.borderColor = "green";
                        }
                        
                    }
                }
                wordBuffer = ""; // on vide le buffer
                wordArray = []; // on vide le tableau
                currentRowIndex++; // et on passe Ã  la ligne suivante
            
            }
        }
    }
    // let wordArray = wordBuffer.split(""); // convertie la chaÃ®ne de caractÃ¨re en tableau de caractÃ¨res.

    // return wordArray; // on retourne le tableau et la valeur de retour de la vÃ©rification

}

// ContrÃ´le de saisie: vÃ©rifie si la touche saisie est une lettre
function isLetter(letter) {

    return /^[a-zA-Z]$/.test(letter); // on vÃ©rifie si la touche 'letter' appartient Ã  l'alphabet, majuscule ou minuscule puis on la retourne

}

// ContrÃ´le de saisie: efface la derniÃ¨re lettre saisie
function clearLast(word) {

    rowsArray[currentRowIndex].children[wordBuffer.length - 1].textContent = ""; // on vide la derniÃ¨re colonne remplie
    return word.slice(0, -1); // on efface la derniÃ¨re lettre du mot

}

// ContrÃ´le de saisie: vÃ©rifie si le mot fait 5 lettres et existe sinon il renvoie une erreur.
function checkRow(wordBuffer, isInputValidated){

    if (wordBuffer.length < 5) { // on vÃ©rifie si il a remplie tous les colones, si non
        alert('not enough letters'); // on renvoie une alerte notifiant qu le nombre de lettre saisies est incomplet
        isInputValidated = false; // et on infirme la validation
    } else { // si on a 5 lettres alors
        isInputValidated = true; // on valide
    }
    return isInputValidated; // on retourne la valeur de isInputValidated

}

// Validation du mot de 5 caractÃ¨re saisi
function checkWord(wordBuffer, word) {

    isValidated = (wordBuffer === word)? true : false; // si le mot saisi et le mot Ã  deviner sont les mÃªmes, alors isValidated est vraie sinon elle est fausse 
    return isValidated; // on retourne la valeur de isValidated

}

function init() {
    wordBuffer = ""; // on vide le buffer
    wordArray = []; // on vide le tableau
    currentRowIndex = 0;
    isInputValidated = false;
    isValidated = false; 
}